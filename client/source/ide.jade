extend index

block head
    link(rel='stylesheet', href='stylesheets/ide.css')
    link(rel="stylesheet", href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/styles/default.min.css")
    script(src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/highlight.min.js")
    script(src='script/ace/ace.js')
    script(src='script/menu-options.js')
    script(src='script/ace/ext-language_tools.js')
    script.

        let tabs = [];

        let saved = [];

        let unsaved = [];

        let editor;

        let lastTabs = [];

        let currentTab = -1;

        let fireChange = true;

        let n;

        function addTab(scriptName, id, element, force=false) {
            //save current contents to tabs
            console.log('Adding tab: '+scriptName+' '+id);
            if(tabs[id] && !force) {
                let active = $('.script-tab.active');
                if(active.data('id') == id) return false;
                $('.script-tab.active').removeClass('active');
                $('.script.selected').removeClass('selected');
                let script = $('.script[data-id="'+id+'"]');
                script.addClass('selected');
                if(!isScriptVisible(script))
                    scrollToScript(id);
                element.addClass('active');
                setTab(id, tabs[id]);
                if(scriptName != null)
                    lastTabs.push(id);
                return false;
            }
            if(size(tabs) >= 8) {
                sendAlert('Maximum of 8 tabs allowed. Please close a tab first.');
                return false;
            }
            $.post('/ide/load-script/'+id, {}, ret => {
                let data = JSON.parse(ret);
                if(data.error) {
                    console.error(data.error);
                    return false;
                }
                setTab(id, data.file);
                $('.script-tab.active').removeClass('active');
                let tab = $('<div data-id="'+id+'" class="script-tab active"></div>');
                let span = $('<span></span>');
                let x = $('<i class="fa fa-times-circle close-tab"/>');
                span.html(scriptName);
                tab.append(span);
                tab.append(x);
                tab.data('id', id);
                $('#script-tabs').append(tab);
                tabs[id] = data.file;
                saved[id] = data.file;
                $('#editor').css('border-top-left-radius', '0px');
                lastTabs.push(id);
            });
        }

        function closeNoty(noty) {
            n = null;
            noty.close();
        }

        function closeTab(id, force=false) {
            if(unsaved[id] && !force) {
                n = noty({
                    text: 'File is unsaved. Would you like to try saving first?',
                    type: 'confirm',
                    layout: 'center',
                    dismissQueue: false,
                    theme: 'cryogen',
                    buttons: [{
                        addClass: 'btn btn-success', text: 'Save', onClick: function($noty) {
                            recompile(id, tabs[id], () => $noty.close());
                        }
                    }, {
                        addClass: 'btn btn-primary', text: 'Close Without Saving', onClick: function($noty) {
                            closeTab(id, true);
                            $noty.close();
                        }
                    }, {
                        addClass: 'btn btn-danger', text: 'Cancel', onClick: $noty => {
                            $noty.close();
                        }
                    }]
                });
                return false;
            }
            delete tabs[id];
            let tabE = $('.script-tab[data-id="'+id+'"]');
            let active = tabE.hasClass('active');
            tabE.remove();
            if(active) {
                lastTabs.splice(-1, 1);
                if(size(lastTabs) == 0) {
                    setValue('');
                    currentTab = -1;
                    return false;
                }
                let tab = lastTabs[lastTabs.length-1];
                if(tab !== undefined) {
                    let element = $('.script-tab[data-id="'+tab+'"]');
                    addTab(null, tab, element);
                    return false;
                }
                setValue('');
                currentTab = -1;
            } else {
                let index;
                while((index = lastTabs.indexOf(id)) != -1)
                    lastTabs.splice(index, 1);
            }
            return false;
        }

        function setTab(id, contents) {
            if(unsaved[id])
                $('#title').html('CS2Editor - File has been changed. Ctrl+S to save.');
            else
                $('#title').html('CS2Editor');
            setValue(contents);
            currentTab = id;
        }

        function setValue(contents) {
            fireChange = false;
            editor.session.setValue(contents);
            fireChange = true;
        }

        function onEditorChange() {
            if(currentTab == -1 || !fireChange) return;
            let value = editor.session.getValue();
            if(tabs[currentTab] === value) return;
            tabs[currentTab] = value;
            if(value === saved[currentTab]) {
                delete unsaved[currentTab];
                $('#title').html('CS2Editor');
                return;
            }
            unsaved[currentTab] = true;
            $('#title').html('CS2Editor - File has been changed. Ctrl+S to save.');
        }

        function recompile(id, contents, callback) {
            $.post('/ide/recompile', { id, contents }, ret => {
                let data = JSON.parse(ret);
                if(data.error) {
                    sendAlert(data.error);
                    return false;
                }
                delete unsaved[id];
                saved[id] = contents;
                $('#title').html('CS2Editor');
                sendAlert('Successfully compiled. Fingers crossed this works, brotha.');
                if(callback)
                    callback();
            });
        }

        $(document).ready(() => {
            $('#title').html('CS2Editor');
            let languageTools = ace.require('ace/ext/language_tools');
            editor = ace.edit('editor');
            editor.session.setMode('ace/mode/java');
            editor.session.on('change', onEditorChange);
            editor.setTheme('ace/theme/tomorrow');
            editor.setOptions({
                enableBasicAutocompletion: true,
                enableLiveAutocompletion: true
            });
            editor.commands.addCommand({
                name: "recompile",
                exec: function() {
                    let contents = editor.session.getValue();
                    let script = $('.script-tab.active');
                    let id = script.data('id');
                    recompile(id, contents);
                },
                bindKey: {mac: "cmd-s", win: "ctrl-s"}
            });
            let cs2Completer = {
                getCompletions: (editor, session, pos, prefix, callback) => {
                    if(prefix.length === 0) {
                        callback(null, []);
                        return false;
                    }
                    $.post('/ide/auto-completion/get-instr', { prefix }, ret => {
                        let data = JSON.parse(ret);
                        if(data == null || data.error) {
                            callback(null, []);
                            if(data != null && data.error)
                                console.error(data.error);
                            return false;
                        }
                        callback(null, data.results.map(result => {
                            return {
                                name: result,
                                value: result,
                                meta: 'cs2instr'
                            }
                        }));
                    });
                }
            };
            languageTools.addCompleter(cs2Completer);
        });

        $(document).on('click', '.close-tab', function() {
            let tab = $(this).closest('.script-tab');
            let id = tab.data('id');
            closeTab(id);
            return false;
        });

        $(document).on('click', '.script-tab', function() {
            let scriptName = $(this).html();
            let id = $(this).data('id');
            addTab(scriptName, id, $(this));
            return false;
        });

        $(document).on('click', '.script', function() {
            let name = $(this).find('.script-title').html();
            let id = $(this).data('id');
            $('.script.selected').removeClass('selected');
            $(this).addClass('selected');
            let element = $('.script-tab[data-id="'+id+'"]');
            addTab(name, id, element);
        });

        function scrollToScript(id) {
            console.log($('.script[data-id="'+id+'"]').offset().top);
            $('#script-container').scrollTo('.script[data-id="'+id+'"]', 1000);
        }

        $(document).on('click', '#file-option, #edit-option, #about-option', function() {
            openOptionsMenu($(this));
        });

        function openOptionsMenu(element) {
            let menu = $('#options-menu');
            menu.empty();
            menu.css({
                display: 'block',
                top: element.position().bottom,
                left: element.position().left
            });
            $('.file-button.active').removeClass('active');
            element.addClass('active');
            let options;
            if(element.attr('id').includes('file'))
                options = FILE_OPTIONS;
            else if(element.attr('id').includes('edit'))
                options = EDIT_OPTIONS;
            else if(element.attr('id').includes('about'))
                options = ABOUT_OPTIONS;
            addOptions(menu, options);
        }

        function addOptions(menu, options) {
            for(let option of options) {
                let element = $('<div class="menu-option"></div>');
                let name = $('<span></span>');
                name.addClass('option-name');
                name.html(option.name);
                element.append(name);
                if(option.shortcut) {
                    let shortcut = $('<span></span>');
                    shortcut.addClass('option-shortcut');
                    shortcut.html(option.shortcut);
                    element.append(shortcut);
                }
                if(option.onClick)
                    element.click(option.onClick);
                menu.append(element);
                menu.append($('<div style="clear: both;"></div>'));
            }
        }

        function closeOptionsMenu() {
            $('#options-menu').css('display', 'none');
            $('.file-button.active').removeClass('active');
        }

        function size(array) {
            let results = 0;
            for(let i = 0; i < array.length; i++)
                if(array[i] !== undefined) results++;
            return results;
        }

        function isScriptVisible(elem) {
            var docViewTop = $('#script-container').scrollTop();
            var docViewBottom = docViewTop + $('#script-container').height();

            var elemTop = elem.offset().top;
            var elemBottom = elemTop + elem.height();

            return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
        }

        $(document).click(function(e) {
            var target = e.target;
            let menu = $('#options-menu');
            if(menu.css('display') == 'none') return;
            if($(e.target).closest('#options-menu').length || $(e.target).closest('.file-button').length) {

            } else {
                closeOptionsMenu();
            }
            if(n == null)
                return;
            var id = n.options.id;
            if($(e.target).closest('#'+id).length) {

            } else {
                if(n.options.dismissOnOutsideClick) {
                    n.close();
                    n = null;
                }
            }
        });
    
block main_content
    div#file-buttons
        p.file-button#file-option File
        p.file-button#edit-option Edit
        p.file-button#about-option About
    div#script-tabs
    div(style='clear: both;')
    div#script-container
        for script in scripts
            div.script(data-id=script.get('id'))
                p.script-title= script.getProperty('name')
    pre#editor
    div#options-menu
